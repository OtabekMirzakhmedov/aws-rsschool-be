openapi: "3.0.0"
info:
  title: "Product Service API"
  version: "1.0.0"
  description: "API documentation for the Product Service, which provides endpoints for retrieving and creating product data."
servers:
  - url: "https://{apiId}.execute-api.{region}.amazonaws.com/{stage}"
    description: "API Gateway endpoint"
    variables:
      apiId:
        default: "2iaoohc9gd"
      region:
        default: "eu-west-1"
      stage:
        default: "dev"
paths:
  /products:
    get:
      summary: "Get a list of all products"
      operationId: "getProductsList"
      responses:
        '200':
          description: "A JSON array of products with stock information"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductWithStock"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: "Create a new product"
      operationId: "createProduct"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        '201':
          description: "Product created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductWithStock"
        '400':
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products/{productId}:
    get:
      summary: "Get a product by its ID"
      operationId: "getProductsById"
      parameters:
        - name: "productId"
          in: "path"
          required: true
          description: "The ID of the product"
          schema:
            type: "string"
      responses:
        '200':
          description: "Product details with stock information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductWithStock"
        '404':
          description: "Product not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Product:
      type: "object"
      properties:
        id:
          type: "string"
          example: "7567ec4b-b10c-48c5-9345-fc73c48a80aa"
        title:
          type: "string"
          example: "iPhone 14 Pro"
        description:
          type: "string"
          example: "Latest iPhone model with A16 Bionic chip, featuring a 6.1-inch Super Retina XDR display"
        price:
          type: "number"
          example: 999
      required:
        - id
        - title
        - price
    ProductWithStock:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: "object"
          properties:
            count:
              type: "number"
              description: "Number of items in stock"
              example: 42
    ProductInput:
      type: "object"
      properties:
        title:
          type: "string"
          example: "iPhone 14 Pro"
        description:
          type: "string"
          example: "Latest iPhone model with A16 Bionic chip, featuring a 6.1-inch Super Retina XDR display"
        price:
          type: "number"
          example: 999
        count:
          type: "number"
          example: 10
      required:
        - title
        - price
    ErrorResponse:
      type: "object"
      properties:
        success:
          type: "boolean"
          example: false
        error:
          type: "object"
          properties:
            message:
              type: "string"
              example: "Product not found"
            details:
              type: "string"
              example: "Detailed error message here."